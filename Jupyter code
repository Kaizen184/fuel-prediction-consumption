{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8e5d9807",
   "metadata": {},
   "source": [
    "# Title: Machine Learning for fuel consumption prediction  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46650d80",
   "metadata": {},
   "source": [
    "# Content of the document\n",
    " 1. Problem Statement \n",
    " 2. Data Collection\n",
    " 3. Data Exploration\n",
    " 4. Data Preprocessing   \n",
    " 5. Model selection and hyperparameter tuning\n",
    " 5. Model Assessement\n",
    " 6. Feature Importance Analysis\n",
    " 7. Conclusion\n",
    " 8. References \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "258ec4e0",
   "metadata": {},
   "source": [
    "# 1. Problem Statement\n",
    "\n",
    "The objective of this project is <b>to predict the fuel efficiency of vehicles (MPG)</b> based on the other information about the vehicles. My company provided me with historical continuous data on MPG based on the fuel efficiency of each vehicle from the 70s to the 80s.\n",
    "\n",
    "In order to accomplish this, I need to <b>create an end-to-end supervised machine learning pipeline </b>. Once the pipeline is designed and implemented, it will be submitted to the company's lead data scientist for prediction purposes.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "006e08d5",
   "metadata": {},
   "source": [
    "Here are the steps I will take to build my pipeline: \n",
    "    \n",
    "     1. Data Collection: I will use the  Auto MPG dataset obtained from the UCI ML Repository.\n",
    "     2. Data Exploration: This will be done to identify the most important features and combine them in new ways.\n",
    "     3. Data Preprocessing: Lay out a pipeline of tasks for transforming data for use in my machine learning model.\n",
    "     4. Model selection & Hyperparameter Tuning : Cross-validate a few models and fine-tune hyperparameters for \n",
    "        models that showed promising predictions.\n",
    "     5. Model Assessment: Determine the performance of the final trained model.\n",
    "     6. A feature importance analysis\n",
    "     7. Conclusion & recommendations \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed77a85e",
   "metadata": {},
   "source": [
    "# 2. Data Collection\n",
    "In this step I will: \n",
    "    \n",
    "  - Identify data sources\n",
    "  - Split the data into training and test sets\n",
    "\n",
    "\n",
    "Before starting, as a first step, I will call some libraries I need in order to build my model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be4cc83b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "#install the necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "# import linear regression\n",
    "from sklearn.linear_model import LinearRegression\n",
    "# Import mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "# Import Grid search CV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "# Import the SVR\n",
    "from sklearn.svm import SVR\n",
    "#import Random Forest Regressor\n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8743b74e",
   "metadata": {},
   "source": [
    "Source of the data: (UCI Machine Learning Repository: Auto MPG Data Set, 2022)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bbdba879",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2023-03-13 10:20:36--  http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data\n",
      "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252\n",
      "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:80... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 30286 (30K) [application/x-httpd-php]\n",
      "Saving to: ‘auto-mpg.data.1’\n",
      "\n",
      "auto-mpg.data.1     100%[===================>]  29.58K   187KB/s    in 0.2s    \n",
      "\n",
      "2023-03-13 10:20:37 (187 KB/s) - ‘auto-mpg.data.1’ saved [30286/30286]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Load the data from UCI ML Repository\n",
    "\n",
    "!wget \"http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "64be8329",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using Pandas to read data from a file\n",
    "\n",
    "attributes = ['mpg','cylinders','displacement','horsepower','weight','Speed', 'year model', 'origin']\n",
    "\n",
    "initial_data = pd.read_csv('./auto-mpg.data', names=attributes, na_values = \"?\", comment = '\\t', sep= \" \",\n",
    "                           skipinitialspace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "95f7e9c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>weight</th>\n",
       "      <th>Speed</th>\n",
       "      <th>year model</th>\n",
       "      <th>origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>307.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>3504.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15.0</td>\n",
       "      <td>8</td>\n",
       "      <td>350.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>3693.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>318.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3436.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.0</td>\n",
       "      <td>8</td>\n",
       "      <td>304.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3433.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.0</td>\n",
       "      <td>8</td>\n",
       "      <td>302.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>3449.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mpg  cylinders  displacement  horsepower  weight  Speed  year model  \\\n",
       "0  18.0          8         307.0       130.0  3504.0   12.0          70   \n",
       "1  15.0          8         350.0       165.0  3693.0   11.5          70   \n",
       "2  18.0          8         318.0       150.0  3436.0   11.0          70   \n",
       "3  16.0          8         304.0       150.0  3433.0   12.0          70   \n",
       "4  17.0          8         302.0       140.0  3449.0   10.5          70   \n",
       "\n",
       "   origin  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a copy of the original data\n",
    "my_data = initial_data.copy()\n",
    "\n",
    "# Examine my data structure and return the top 5 rows of the data frame.\n",
    "my_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "105c49bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split my data into training and test sets\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.25, random_state=42)\n",
    "for tr_ind, test_ind in split.split(my_data, my_data[\"cylinders\"]):\n",
    "    tr_set = my_data.loc[tr_ind]\n",
    "    test_set = my_data.loc[test_ind]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d18858b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Segregating Target and Feature variables\n",
    "data_set = tr_set.drop(\"mpg\", axis=1)\n",
    "target = tr_set[\"mpg\"].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6bd0d00c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 298 entries, 227 to 254\n",
      "Data columns (total 7 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   cylinders     298 non-null    int64  \n",
      " 1   displacement  298 non-null    float64\n",
      " 2   horsepower    294 non-null    float64\n",
      " 3   weight        298 non-null    float64\n",
      " 4   Speed         298 non-null    float64\n",
      " 5   year model    298 non-null    int64  \n",
      " 6   origin        298 non-null    int64  \n",
      "dtypes: float64(4), int64(3)\n",
      "memory usage: 18.6 KB\n"
     ]
    }
   ],
   "source": [
    "data_set.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "362ec671",
   "metadata": {},
   "source": [
    "# 3. Data Exploration\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27dae939",
   "metadata": {},
   "source": [
    "### Check for Data type of columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "311413d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 298 entries, 227 to 254\n",
      "Data columns (total 7 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   cylinders     298 non-null    int64  \n",
      " 1   displacement  298 non-null    float64\n",
      " 2   horsepower    294 non-null    float64\n",
      " 3   weight        298 non-null    float64\n",
      " 4   Speed         298 non-null    float64\n",
      " 5   year model    298 non-null    int64  \n",
      " 6   origin        298 non-null    int64  \n",
      "dtypes: float64(4), int64(3)\n",
      "memory usage: 18.6 KB\n"
     ]
    }
   ],
   "source": [
    "# Check the info of my data\n",
    "data_set.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0b9ae2a",
   "metadata": {},
   "source": [
    "4 values are missing from the variable \"horsepower\". As far as the formatting is concerned, nothing needs to be done."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7379ba9",
   "metadata": {},
   "source": [
    " ### Check for null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "518c899a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cylinders       0\n",
       "displacement    0\n",
       "horsepower      4\n",
       "weight          0\n",
       "Speed           0\n",
       "year model      0\n",
       "origin          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking for all the null values\n",
    "data_set.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "657ca134",
   "metadata": {},
   "source": [
    "It has been mentioned earlier that only <b> \"horsepower\" has four missing values </b>. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d40b24c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>weight</th>\n",
       "      <th>Speed</th>\n",
       "      <th>year model</th>\n",
       "      <th>origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>298.000000</td>\n",
       "      <td>298.000000</td>\n",
       "      <td>294.000000</td>\n",
       "      <td>298.000000</td>\n",
       "      <td>298.000000</td>\n",
       "      <td>298.000000</td>\n",
       "      <td>298.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.453020</td>\n",
       "      <td>192.489933</td>\n",
       "      <td>103.911565</td>\n",
       "      <td>2984.996644</td>\n",
       "      <td>15.671812</td>\n",
       "      <td>75.959732</td>\n",
       "      <td>1.567114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.701497</td>\n",
       "      <td>101.224631</td>\n",
       "      <td>37.547953</td>\n",
       "      <td>827.999217</td>\n",
       "      <td>2.791729</td>\n",
       "      <td>3.691612</td>\n",
       "      <td>0.793827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>1755.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>2257.500000</td>\n",
       "      <td>13.925000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>146.000000</td>\n",
       "      <td>93.500000</td>\n",
       "      <td>2866.500000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>261.500000</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>3573.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>455.000000</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>5140.000000</td>\n",
       "      <td>24.800000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        cylinders  displacement  horsepower       weight       Speed  \\\n",
       "count  298.000000    298.000000  294.000000   298.000000  298.000000   \n",
       "mean     5.453020    192.489933  103.911565  2984.996644   15.671812   \n",
       "std      1.701497    101.224631   37.547953   827.999217    2.791729   \n",
       "min      3.000000     68.000000   46.000000  1755.000000    8.000000   \n",
       "25%      4.000000    105.000000   76.000000  2257.500000   13.925000   \n",
       "50%      4.000000    146.000000   93.500000  2866.500000   15.500000   \n",
       "75%      8.000000    261.500000  125.000000  3573.000000   17.300000   \n",
       "max      8.000000    455.000000  230.000000  5140.000000   24.800000   \n",
       "\n",
       "       year model      origin  \n",
       "count  298.000000  298.000000  \n",
       "mean    75.959732    1.567114  \n",
       "std      3.691612    0.793827  \n",
       "min     70.000000    1.000000  \n",
       "25%     73.000000    1.000000  \n",
       "50%     76.000000    1.000000  \n",
       "75%     79.000000    2.000000  \n",
       "max     82.000000    3.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Check summary statistics\n",
    "data_set.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da6cc9b7",
   "metadata": {},
   "source": [
    "### Look for the category distribution in categorical columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a07b9c",
   "metadata": {},
   "source": [
    "Now I want to see the distribution to know the % of how many rows belong to a particulare class of value.\n",
    "To do that I will first count the number of rows for each class of value then I will devide it by the total \n",
    "number of rows.\n",
    "In my case I will do that for both \"origin\" & \"cylinders\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6a926599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.624161\n",
       "3    0.191275\n",
       "2    0.184564\n",
       "Name: origin, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Origin distribution\n",
    "data_set['origin'].value_counts()/ len(data_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d56607",
   "metadata": {},
   "source": [
    "According to the results, more than 62% of the origin \"1\", 29% from \"2\" and 18% from \"3\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "789ac4f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4    0.513423\n",
       "8    0.258389\n",
       "6    0.211409\n",
       "3    0.010067\n",
       "5    0.006711\n",
       "Name: cylinders, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Cylinders distribution\n",
    "data_set[\"cylinders\"].value_counts() / len(data_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "108ed62c",
   "metadata": {},
   "source": [
    "According to the results, more than 50% of the engines are 4 cylinders, 25% are 8 cylinders, 21% are 6 cylinders, and the remaining are 3 cylinders and 5 cylinders.\n",
    "\n",
    "My consideration of both distributions leads me to keep in mind that <b>while testing that most of the vehicles belong to 4 cylinders & are mostly from origin 1</b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebc71e26",
   "metadata": {},
   "source": [
    "### Checking correlation between different attributes "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cff9db70",
   "metadata": {},
   "source": [
    "To do that I will use the function Corr of Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e0a1f681",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_1b602_row0_col0, #T_1b602_row1_col1, #T_1b602_row2_col2, #T_1b602_row3_col3, #T_1b602_row4_col4, #T_1b602_row5_col5, #T_1b602_row6_col6 {\n",
       "  background-color: #084081;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row0_col1, #T_1b602_row1_col0 {\n",
       "  background-color: #08498a;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row0_col2 {\n",
       "  background-color: #085ea1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row0_col3, #T_1b602_row2_col1, #T_1b602_row3_col0 {\n",
       "  background-color: #085598;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row0_col4, #T_1b602_row2_col6 {\n",
       "  background-color: #e5f5e0;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row0_col5, #T_1b602_row4_col1 {\n",
       "  background-color: #eff9e9;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row0_col6 {\n",
       "  background-color: #f1f9ea;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row1_col2 {\n",
       "  background-color: #085497;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row1_col3, #T_1b602_row3_col1 {\n",
       "  background-color: #084d8e;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row1_col4, #T_1b602_row3_col5 {\n",
       "  background-color: #e9f7e3;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row1_col5 {\n",
       "  background-color: #f3faec;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row1_col6, #T_1b602_row2_col4, #T_1b602_row2_col5, #T_1b602_row4_col2, #T_1b602_row6_col0, #T_1b602_row6_col1, #T_1b602_row6_col3 {\n",
       "  background-color: #f7fcf0;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row2_col0 {\n",
       "  background-color: #0861a4;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row2_col3 {\n",
       "  background-color: #085a9d;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row3_col2 {\n",
       "  background-color: #08589b;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_1b602_row3_col4 {\n",
       "  background-color: #dbf1d5;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row3_col6 {\n",
       "  background-color: #f4fbed;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row4_col0 {\n",
       "  background-color: #f2faeb;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row4_col3 {\n",
       "  background-color: #e3f4de;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row4_col5 {\n",
       "  background-color: #81cec2;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row4_col6, #T_1b602_row5_col6 {\n",
       "  background-color: #77cac5;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row5_col0 {\n",
       "  background-color: #def2d9;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row5_col1 {\n",
       "  background-color: #dcf1d6;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row5_col2 {\n",
       "  background-color: #daf0d4;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row5_col3 {\n",
       "  background-color: #d7efd1;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row5_col4 {\n",
       "  background-color: #62becc;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row6_col2 {\n",
       "  background-color: #dff3da;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row6_col4 {\n",
       "  background-color: #72c7c7;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_1b602_row6_col5 {\n",
       "  background-color: #94d5bc;\n",
       "  color: #000000;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_1b602_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >cylinders</th>\n",
       "      <th class=\"col_heading level0 col1\" >displacement</th>\n",
       "      <th class=\"col_heading level0 col2\" >horsepower</th>\n",
       "      <th class=\"col_heading level0 col3\" >weight</th>\n",
       "      <th class=\"col_heading level0 col4\" >Speed</th>\n",
       "      <th class=\"col_heading level0 col5\" >year model</th>\n",
       "      <th class=\"col_heading level0 col6\" >origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row0\" class=\"row_heading level0 row0\" >cylinders</th>\n",
       "      <td id=\"T_1b602_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row0_col1\" class=\"data row0 col1\" >0.951216</td>\n",
       "      <td id=\"T_1b602_row0_col2\" class=\"data row0 col2\" >0.838601</td>\n",
       "      <td id=\"T_1b602_row0_col3\" class=\"data row0 col3\" >0.891272</td>\n",
       "      <td id=\"T_1b602_row0_col4\" class=\"data row0 col4\" >-0.514603</td>\n",
       "      <td id=\"T_1b602_row0_col5\" class=\"data row0 col5\" >-0.342831</td>\n",
       "      <td id=\"T_1b602_row0_col6\" class=\"data row0 col6\" >-0.562276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row1\" class=\"row_heading level0 row1\" >displacement</th>\n",
       "      <td id=\"T_1b602_row1_col0\" class=\"data row1 col0\" >0.951216</td>\n",
       "      <td id=\"T_1b602_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row1_col2\" class=\"data row1 col2\" >0.892009</td>\n",
       "      <td id=\"T_1b602_row1_col3\" class=\"data row1 col3\" >0.932420</td>\n",
       "      <td id=\"T_1b602_row1_col4\" class=\"data row1 col4\" >-0.554452</td>\n",
       "      <td id=\"T_1b602_row1_col5\" class=\"data row1 col5\" >-0.373840</td>\n",
       "      <td id=\"T_1b602_row1_col6\" class=\"data row1 col6\" >-0.624830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row2\" class=\"row_heading level0 row2\" >horsepower</th>\n",
       "      <td id=\"T_1b602_row2_col0\" class=\"data row2 col0\" >0.838601</td>\n",
       "      <td id=\"T_1b602_row2_col1\" class=\"data row2 col1\" >0.892009</td>\n",
       "      <td id=\"T_1b602_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row2_col3\" class=\"data row2 col3\" >0.868459</td>\n",
       "      <td id=\"T_1b602_row2_col4\" class=\"data row2 col4\" >-0.684387</td>\n",
       "      <td id=\"T_1b602_row2_col5\" class=\"data row2 col5\" >-0.407914</td>\n",
       "      <td id=\"T_1b602_row2_col6\" class=\"data row2 col6\" >-0.464907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row3\" class=\"row_heading level0 row3\" >weight</th>\n",
       "      <td id=\"T_1b602_row3_col0\" class=\"data row3 col0\" >0.891272</td>\n",
       "      <td id=\"T_1b602_row3_col1\" class=\"data row3 col1\" >0.932420</td>\n",
       "      <td id=\"T_1b602_row3_col2\" class=\"data row3 col2\" >0.868459</td>\n",
       "      <td id=\"T_1b602_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row3_col4\" class=\"data row3 col4\" >-0.420830</td>\n",
       "      <td id=\"T_1b602_row3_col5\" class=\"data row3 col5\" >-0.302283</td>\n",
       "      <td id=\"T_1b602_row3_col6\" class=\"data row3 col6\" >-0.597929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row4\" class=\"row_heading level0 row4\" >Speed</th>\n",
       "      <td id=\"T_1b602_row4_col0\" class=\"data row4 col0\" >-0.514603</td>\n",
       "      <td id=\"T_1b602_row4_col1\" class=\"data row4 col1\" >-0.554452</td>\n",
       "      <td id=\"T_1b602_row4_col2\" class=\"data row4 col2\" >-0.684387</td>\n",
       "      <td id=\"T_1b602_row4_col3\" class=\"data row4 col3\" >-0.420830</td>\n",
       "      <td id=\"T_1b602_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row4_col5\" class=\"data row4 col5\" >0.272655</td>\n",
       "      <td id=\"T_1b602_row4_col6\" class=\"data row4 col6\" >0.203228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row5\" class=\"row_heading level0 row5\" >year model</th>\n",
       "      <td id=\"T_1b602_row5_col0\" class=\"data row5 col0\" >-0.342831</td>\n",
       "      <td id=\"T_1b602_row5_col1\" class=\"data row5 col1\" >-0.373840</td>\n",
       "      <td id=\"T_1b602_row5_col2\" class=\"data row5 col2\" >-0.407914</td>\n",
       "      <td id=\"T_1b602_row5_col3\" class=\"data row5 col3\" >-0.302283</td>\n",
       "      <td id=\"T_1b602_row5_col4\" class=\"data row5 col4\" >0.272655</td>\n",
       "      <td id=\"T_1b602_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
       "      <td id=\"T_1b602_row5_col6\" class=\"data row5 col6\" >0.201992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_1b602_level0_row6\" class=\"row_heading level0 row6\" >origin</th>\n",
       "      <td id=\"T_1b602_row6_col0\" class=\"data row6 col0\" >-0.562276</td>\n",
       "      <td id=\"T_1b602_row6_col1\" class=\"data row6 col1\" >-0.624830</td>\n",
       "      <td id=\"T_1b602_row6_col2\" class=\"data row6 col2\" >-0.464907</td>\n",
       "      <td id=\"T_1b602_row6_col3\" class=\"data row6 col3\" >-0.597929</td>\n",
       "      <td id=\"T_1b602_row6_col4\" class=\"data row6 col4\" >0.203228</td>\n",
       "      <td id=\"T_1b602_row6_col5\" class=\"data row6 col5\" >0.201992</td>\n",
       "      <td id=\"T_1b602_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fea41e9c1c0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_set.corr().style.background_gradient(cmap=\"GnBu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b55e417",
   "metadata": {},
   "source": [
    "This helps to understand witch are the most important features to look at when building my machine learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3829991",
   "metadata": {},
   "source": [
    "# 4. Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d5fcbfa",
   "metadata": {},
   "source": [
    "Choosing the best imputation technique (mean, median or mode)is key to getting the best value from missing values. \n",
    "Using this value, missing values can be replaced appropriately by finding out which measures\n",
    "the central tendency best. <b>(python, 2022)</b>\n",
    "\n",
    "A distribution plot or a box plot is extremely useful for determining which technique to use. For that we use \n",
    "the function sns.boxplot as follow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "887f5fe3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='horsepower'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=data_set['horsepower'], color='yellow')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "770a1e8a",
   "metadata": {},
   "source": [
    "Considering there are only a few outliers, I opted to <b> impute null values based on the median</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "07e793d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the median\n",
    "my_median = data_set['horsepower'].median()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9752c6ab",
   "metadata": {},
   "source": [
    "### Impute null values of \"horsepower\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4a82ceee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#impute my null values with median\n",
    "data_set['horsepower'] = data_set['horsepower'].fillna(my_median)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1bb194a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 298 entries, 227 to 254\n",
      "Data columns (total 7 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   cylinders     298 non-null    int64  \n",
      " 1   displacement  298 non-null    float64\n",
      " 2   horsepower    298 non-null    float64\n",
      " 3   weight        298 non-null    float64\n",
      " 4   Speed         298 non-null    float64\n",
      " 5   year model    298 non-null    int64  \n",
      " 6   origin        298 non-null    int64  \n",
      "dtypes: float64(4), int64(3)\n",
      "memory usage: 18.6 KB\n"
     ]
    }
   ],
   "source": [
    "# Check my new values\n",
    "data_set.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f719d1ed",
   "metadata": {},
   "source": [
    "# 4. Selecting and Training Models\n",
    "In this section I will train the 3 following models, train them and compare between them:\n",
    " \n",
    "    - Linear Regression\n",
    "    - Random Forest\n",
    "    - Support Vector Machine regressor\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7fed9e9",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f51f8953",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_reg = LinearRegression()\n",
    "linear_reg.fit(data_set, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cde8cb5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction of samples:  [19.71572776 32.15336989 27.48068721 35.6183993  15.70886788 15.77215121\n",
      " 13.71220266 10.75170415 14.87417604 31.1086198 ]\n"
     ]
    }
   ],
   "source": [
    "# Testing the predictions \n",
    "sample_mydata = data_set.iloc[:10]\n",
    "sample_target = target.iloc[:10]\n",
    "\n",
    "print(\"Prediction of samples: \", linear_reg.predict(sample_mydata))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "da6c3558",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual Labels of samples:  [19.0, 39.4, 24.0, 38.0, 15.5, 11.0, 15.0, 14.0, 18.0, 34.3]\n"
     ]
    }
   ],
   "source": [
    "print(\"Actual Labels of samples: \", list(sample_target))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad55894b",
   "metadata": {},
   "source": [
    "### Calculate the Mean Squared Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ecb8b689",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean squared error is for linear regression model is:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3.3144856970961296"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mpg_pred = linear_reg.predict(data_set)\n",
    "mse_linear = mean_squared_error(target, mpg_pred)\n",
    "rmse_linear = np.sqrt(mse_linear)\n",
    "print('The mean squared error is for linear regression model is:')\n",
    "rmse_linear"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79af369",
   "metadata": {},
   "source": [
    "### Cross validation for linear regression model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3659b01",
   "metadata": {},
   "source": [
    "When Scikit-Learn performs a K-fold cross-validation, the training set is randomly split into K subsets called folds, and then the model is trained and evaluated K times, with each fold being evaluated at a different time, and each fold being trained on the following time.\n",
    "\n",
    "The result is an array containing the scores for all K evaluations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2f3ad5fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean square error values of the 10 quick K-fold cross validations:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.02494035, 2.54628965, 4.30429811, 2.48921885, 3.28636331,\n",
       "       2.92807517, 3.96718379, 3.74807318, 3.16317425, 3.96040375])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "#Pass linear regression model & prepare the data labels scoring method and then 10 quick k-fold cross validation\n",
    "scor = cross_val_score(linear_reg, data_set, target, scoring=\"neg_mean_squared_error\", cv = 10)\n",
    "linear_reg_scor_rmse = np.sqrt(-scor)\n",
    "print('The mean square error values of the 10 quick K-fold cross validations:')\n",
    "linear_reg_scor_rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "856463a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average mean square error for Linear regression model: \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3.341802040394275"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find out the average\n",
    "print('The average mean square error for Linear regression model: ')\n",
    "linear_reg_scor_rmse.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22f2c0dd",
   "metadata": {},
   "source": [
    "## Random Forest model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a5609946",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Utilize the fit method to initiate training\n",
    "regress_forst = RandomForestRegressor()\n",
    "regress_forst.fit(data_set, target)\n",
    "\n",
    "#Provide the cross value score \n",
    "forest_reg_cv_scor= cross_val_score(regress_forst,\n",
    "                                         data_set,\n",
    "                                         target,\n",
    "                                         scoring='neg_mean_squared_error',\n",
    "                                         cv = 15)\n",
    "\n",
    "# For all 10 values I have, calculate the square root of my negative values\n",
    "forest_reg_rmse_scor = np.sqrt(-forest_reg_cv_scor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8c2c280a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average mean square error for Random Forest Regressor : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2.491128354424783"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average \n",
    "print('The average mean square error for Random Forest Regressor : ')\n",
    "forest_reg_rmse_scor.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89a35668",
   "metadata": {},
   "source": [
    "<b> Random Forest performed better </b>than the linear regression model "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9209394e",
   "metadata": {},
   "source": [
    "## Support Vector Machine Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bbf9db3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I have selected linear to map a lower dimensional data into a higher dimensional data\n",
    "regr_svm = SVR(kernel='linear')\n",
    "# fit the data with fit function\n",
    "regr_svm.fit(data_set, target)\n",
    "#cross validation\n",
    "regr_svm_cv_scor = cross_val_score(regr_svm, data_set, target,\n",
    "                                scoring='neg_mean_squared_error',\n",
    "                                cv = 15)\n",
    "\n",
    "rmse_scor_svm = np.sqrt(-regr_svm_cv_scor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "99e1244d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average mean square error for SVMR : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4.424479835233397"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average \n",
    "print('The average mean square error for SVMR : ')\n",
    "rmse_scor_svm.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a0d2460",
   "metadata": {},
   "source": [
    "So far we see Random Forest turns out to be the best model out of the 3. Now I will perform Hyperparameter tuning to find out which set of parameters of the random forest model works the best. So if we can improve the performane of random forest model from what we already have. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "589ac304",
   "metadata": {},
   "source": [
    "## GridSearchCV for hyperparameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "392561a2",
   "metadata": {},
   "source": [
    "The hyperparameters of the random forest regressor must be fine-tuned here. In order to do so, I selected the grid search of the cyclic learns model selection module. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c6b870c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=RandomForestRegressor(),\n",
       "             param_grid=[{&#x27;max_features&#x27;: [2, 4, 6, 8],\n",
       "                          &#x27;n_estimators&#x27;: [2, 10, 15]},\n",
       "                         {&#x27;bootstrap&#x27;: [False], &#x27;max_features&#x27;: [2, 4, 5],\n",
       "                          &#x27;n_estimators&#x27;: [4, 8]}],\n",
       "             return_train_score=True, scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=RandomForestRegressor(),\n",
       "             param_grid=[{&#x27;max_features&#x27;: [2, 4, 6, 8],\n",
       "                          &#x27;n_estimators&#x27;: [2, 10, 15]},\n",
       "                         {&#x27;bootstrap&#x27;: [False], &#x27;max_features&#x27;: [2, 4, 5],\n",
       "                          &#x27;n_estimators&#x27;: [4, 8]}],\n",
       "             return_train_score=True, scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=10, estimator=RandomForestRegressor(),\n",
       "             param_grid=[{'max_features': [2, 4, 6, 8],\n",
       "                          'n_estimators': [2, 10, 15]},\n",
       "                         {'bootstrap': [False], 'max_features': [2, 4, 5],\n",
       "                          'n_estimators': [4, 8]}],\n",
       "             return_train_score=True, scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define the parameter grid \n",
    "prm_grid_ = [\n",
    "    {'n_estimators': [2, 10, 15], 'max_features': [2, 4, 6,8]},\n",
    "    {'bootstrap': [False], 'n_estimators': [4, 8], 'max_features': [2, 4, 5]},\n",
    "  ]\n",
    "\n",
    "frst_regres = RandomForestRegressor()\n",
    "\n",
    "search_grid = GridSearchCV(frst_regres, prm_grid_,\n",
    "                           scoring='neg_mean_squared_error',\n",
    "                           return_train_score=True,\n",
    "                           cv=10,\n",
    "                          )\n",
    "# Fit the data \n",
    "search_grid.fit(data_set, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f740aede",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best parameters we could have for Random Forest are:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'max_features': 8, 'n_estimators': 10}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"The best parameters we could have for Random Forest are:\")\n",
    "search_grid.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5454a40a",
   "metadata": {},
   "source": [
    "Now we want to see which parameters had returned what scores "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b2fa7b3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.583679961850042 {'max_features': 2, 'n_estimators': 2}\n",
      "2.744335225074773 {'max_features': 2, 'n_estimators': 10}\n",
      "2.704608099267951 {'max_features': 2, 'n_estimators': 15}\n",
      "3.0573984602644755 {'max_features': 4, 'n_estimators': 2}\n",
      "2.7993798841229434 {'max_features': 4, 'n_estimators': 10}\n",
      "2.6692158285174643 {'max_features': 4, 'n_estimators': 15}\n",
      "3.2060766208639766 {'max_features': 6, 'n_estimators': 2}\n",
      "2.815043302172002 {'max_features': 6, 'n_estimators': 10}\n",
      "2.7587333962289127 {'max_features': 6, 'n_estimators': 15}\n",
      "3.162983278234459 {'max_features': 8, 'n_estimators': 2}\n",
      "2.6673712488722567 {'max_features': 8, 'n_estimators': 10}\n",
      "2.7372290497890273 {'max_features': 8, 'n_estimators': 15}\n",
      "2.9145130431575756 {'bootstrap': False, 'max_features': 2, 'n_estimators': 4}\n",
      "2.810570030664618 {'bootstrap': False, 'max_features': 2, 'n_estimators': 8}\n",
      "2.9243131868769683 {'bootstrap': False, 'max_features': 4, 'n_estimators': 4}\n",
      "2.738782807737731 {'bootstrap': False, 'max_features': 4, 'n_estimators': 8}\n",
      "3.0209392212912247 {'bootstrap': False, 'max_features': 5, 'n_estimators': 4}\n",
      "2.8730333665961334 {'bootstrap': False, 'max_features': 5, 'n_estimators': 8}\n"
     ]
    }
   ],
   "source": [
    "# Keeping track of all our scores\n",
    "scor_cv = search_grid.cv_results_\n",
    "\n",
    "# Print all the parameters along with their scores\n",
    "for scor_mean, prms in zip(scor_cv['mean_test_score'], scor_cv[\"params\"]):\n",
    "    print(np.sqrt(-scor_mean), prms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e7a9135",
   "metadata": {},
   "source": [
    "I still have <b>my best model, the Random Forest Regressor<b/>, with a square error of 2.51."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97a40a6e",
   "metadata": {},
   "source": [
    "# 5. Model Assessement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "765d18e7",
   "metadata": {},
   "source": [
    "In order to assess the model using the data I kept for testing. First ,  I must prepare it and ensure that there are no null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5b12f8dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 100 entries, 364 to 69\n",
      "Data columns (total 8 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   mpg           100 non-null    float64\n",
      " 1   cylinders     100 non-null    int64  \n",
      " 2   displacement  100 non-null    float64\n",
      " 3   horsepower    98 non-null     float64\n",
      " 4   weight        100 non-null    float64\n",
      " 5   Speed         100 non-null    float64\n",
      " 6   year model    100 non-null    int64  \n",
      " 7   origin        100 non-null    int64  \n",
      "dtypes: float64(5), int64(3)\n",
      "memory usage: 7.0 KB\n"
     ]
    }
   ],
   "source": [
    "test_set.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1ec42dd",
   "metadata": {},
   "source": [
    "Using the same approach I applied to the preprocessing data step, I will fill in the two missing values for the attribute horsepower."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cb0a6f21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 100 entries, 364 to 69\n",
      "Data columns (total 8 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   mpg           100 non-null    float64\n",
      " 1   cylinders     100 non-null    int64  \n",
      " 2   displacement  100 non-null    float64\n",
      " 3   horsepower    100 non-null    float64\n",
      " 4   weight        100 non-null    float64\n",
      " 5   Speed         100 non-null    float64\n",
      " 6   year model    100 non-null    int64  \n",
      " 7   origin        100 non-null    int64  \n",
      "dtypes: float64(5), int64(3)\n",
      "memory usage: 7.0 KB\n"
     ]
    }
   ],
   "source": [
    "# calculate the median\n",
    "test_median = test_set['horsepower'].median()\n",
    "#impute my null values with median\n",
    "test_set['horsepower'] = test_set['horsepower'].fillna(test_median)\n",
    "# Check my new values\n",
    "test_set.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85d5cc91",
   "metadata": {},
   "source": [
    "The time has come to test my model, and I have chosen the Random Forest Regressor as my model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "aa0ea8be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# capture my best model in selected model variable \n",
    "selected_model = search_grid.best_estimator_\n",
    "\n",
    "\n",
    "# drop the mpg from our test data\n",
    "data_test = test_set.drop(\"mpg\", axis=1)\n",
    "\n",
    "#segregate my mpg from my testing data \n",
    "target_test = test_set[\"mpg\"].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9d741d49",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict the result\n",
    "selected_model_pr = selected_model.predict(data_test)\n",
    "\n",
    "#calculate squared error\n",
    "mse_last = mean_squared_error(target_test, selected_model_pr)\n",
    "rmse_last=np.sqrt(mse_last)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5da88ebb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.168060132005073"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Print \n",
    "rmse_last"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93b39536",
   "metadata": {},
   "source": [
    "It is encouraging to see that the squared error has decreased from 2.81 to 1.27 compared to the training one. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "25d7b885",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction of samples with the my selected model:  [17.28 41.14 13.75 27.1  15.55]\n"
     ]
    }
   ],
   "source": [
    "# Testing the predictions using my test data\n",
    "sample_testdata = data_test.iloc[:5]\n",
    "sample_testtarget = target_test.iloc[:5]\n",
    "\n",
    "print(\"Prediction of samples with the my selected model: \", selected_model.predict(sample_testdata))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0a1b4470",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual Labels of samples:  [26.6, 29.8, 16.0, 28.0, 13.0]\n"
     ]
    }
   ],
   "source": [
    "print(\"Actual Labels of samples: \", list(sample_testtarget))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd315243",
   "metadata": {},
   "source": [
    "Based on my testing data, I consider the model chosen to be good"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "702fd9ad",
   "metadata": {},
   "source": [
    "# 6. Feature importance Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a6b76fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.06128835, 0.51262105, 0.13036814, 0.12590964, 0.01868379,\n",
       "       0.14588714, 0.00524188])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate features importance \n",
    "feature_import = search_grid.best_estimator_.feature_importances_\n",
    "feature_import"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5252a0d9",
   "metadata": {},
   "source": [
    "We cannot make sense of these numbers if we keep them in this manner without knowing which features they belong to. To do that, I'll combine their names with features' names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1662a24c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features importance:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('year model', 0.005241880421957686),\n",
       " ('weight', 0.01868379142496108),\n",
       " ('mpg', 0.061288347898734094),\n",
       " ('horsepower', 0.12590964370100546),\n",
       " ('displacement', 0.1303681447872625),\n",
       " ('cylinders', 0.5126210480252618),\n",
       " ('Speed', 0.14588714374081754)]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# With the reverse method, the most important feature will appear at the top and so on\n",
    "print(\"Features importance:\")\n",
    "sorted(zip(attributes, feature_import), reverse=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f248c0b",
   "metadata": {},
   "source": [
    "The year model appears to be the most important feature based on the results above. It is now time to evaluate our model with test data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e641b5c",
   "metadata": {},
   "source": [
    "# 8. Conclusion \n",
    "As a result, the machine created for the company can be an effective solution. It may not be 100% accurate, but it can be improved since the squared error was only 2.81 and on testing data we saw a significant improvement of 1.27. Thus, machine learning needs to be trained better to reduce errors. With this machine, the company can start working right away. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5834621",
   "metadata": {},
   "source": [
    "# 9.References"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "324bc6f1",
   "metadata": {},
   "source": [
    "2022. python. [online] Available at: <https://vitalflux.com/pandas-impute-missing-values-mean-median-mode/\n",
    "#:~:text=When%20the%20data%20is%20skewed,be%20done%20with%20numerical%20data> [Accessed 8 July 2022]."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "486f7d3d",
   "metadata": {},
   "source": [
    "Archive.ics.uci.edu. 2022. UCI Machine Learning Repository: Auto MPG Data Set. [online] Available at: <http://archive.ics.uci.edu/ml/datasets/Auto+MPG> [Accessed 5 July 2022]."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
